

[general]

# Fetching term of RRD data for DB
# For example:
# whole_term = 2112-09-01 00:00:00, 2112-10-01 00:00:00
evdb_whole_term =

# Length of unit terms to generate evdb
evdb_unit_term = 24h

evdb_args_fn = evdb_args

# Processing log output path (not dataset but log of this system)
# If empty, output log on stderr
logging = auto.log


# [rrd, ]
log_source = amulog
snmp_source = rrd

# [influx, sql]
evdb = influx

# amulog host_alias filename
host_alias_filename =


[database_amulog]

source_conf = amulog.conf
event_gid = ltgid


[database_rrd]

rows = 1
cf = MAX
correct_roundup = true

# binsize: used for correct_roundup
binsize = 60


[database_influx]

host = localhost
port = 8086
username = root
passwd = root
log_dbname = log
snmp_dbname = snmp
batch_size = 1000
protocol = line


[database_sql]
# Database management system to use
# [sqlite3, mysql] is available
# mysql : Require MySQL for PYTHON (MySQLdb) package
database = sqlite3

# timeseries database for sqlite3
sqlite3_filename = rrd.db

# Database hostname for mysql
mysql_host = localhost

# Database name for mysql
mysql_log_dbname = log
mysql_snmp_dbname = snmp

# Mysql username
mysql_user = test

# Mysql user password
mysql_passwd = test


[filter]
# Filters for log events

# Actions to apply for periodic events
# [sizetest, filter_periodic, remove_periodic, remove_corr, remove_linear]
# are available
rules = sizetest, filter_periodic, remove_linear

# Required event appearance for preprocessing
# set more than 3
pre_count = 5
pre_term = 6h

# threshold for fourier analysis
fourier_sample_rule = 1d_10s, 7d_1m
fourier_th_spec = 0.4
fourier_th_eval = 0.1
fourier_th_restore = 0.5
fourier_peak_order = 200

# threshold for continuous distribution dt filter
linear_sample_rule = 1d_10s
linear_count = 10
linear_th = 0.5

# parameters for method corr
corr_sample_rule = 1d_10s
corr_th = 0.5
corr_diff = 1h, 1d


[snmp_source]
all = rt_if, rt_info,
rt_if = list_rt_if
rt_info = list_rt_info


[snmp_vsource]
all = rt_if_hostsum, sw_if_hostsum
rt_if_hostsum = rt_if, hostsum


[snmp_feature]
rt_cpu_data = rt_info, cpu, norm_fillavg, outlier
rt_cpu_nan = rt_info, cpu, getnan
rt_temp_data = rt_info, temp, norm_fillavg, outlier
rt_temp_nan = rt_info, temp, getnan
rt_inucast_sum = rt_if_hostsum, inucast, norm_fillavg, outlier
rt_outucast_sum = rt_if_hostsum, outucast, norm_fillavg, outlier


[dag]

# Target areas of DAG construction
# If "all" given, use whole hosts as 1 area named "all"
# If "each" given, define each host as 1 area named with hostname
# For example:
# area = core, area1, area2, area3
area = all

